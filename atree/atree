#!/usr/bin/python
# Vladimir Slavik, Red Hat, 2018

from __future__ import print_function
import sys
import re
from os.path import dirname, basename, isfile, isdir, join, abspath
from os import getcwd, chdir
from glob import glob

include_finder = re.compile(r"(\/\/)?.*include\:\:([^\[]+)\[") # specific enough, but does not include the parameters
comment_finder = re.compile(r"(\/{4,})")
ifdef_finder = re.compile(r"(\/\/)?.*((?:ifdef|ifndef|ifeval|endif)::[^\[]*)\[\]") # needs empty brackets at end = skips inline content

do_debug = False
indent_level = 4
invalid_chars = set("<>|*:")

def debug_print(*var) :
  if do_debug :
    print(*var)

stack = []
display_commented = False
analyze_commented = False

class AFile :
  
  def __init__(self, fname, parent_path="") :
    debug_print("AFile.__init__", fname, parent_path)
    self.fname = fname
    self.parent_path = parent_path
    self.commented = False # this is in a comment
    self.recursive = False # this is a known infinite recursion
    self.invalid = False # this as an invalid path
    self.includes = []
    self.conditions = []
    
  def resolve(self) :
    debug_print("resolve()", self.parent_path, self.fname)
    if self.commented and not analyze_commented :
      debug_print("skipping: commented and analyze_commented is off")
      return
    if self.recursive :
      debug_print("skipping: this is self-recursively included")
      return
    if self.invalid :
      debug_print("skipping: this is an invalid file name")
      return
    this_path = dirname(self.fname)
    try :
      if self.parent_path :
        fn = join(self.parent_path, self.fname)
        f = open(fn, "r")
        debug_print("open() ", fn)
      else :
        f = open(self.fname, "r")
        debug_print("open() ", self.fname)
      lines = f.readlines()
      f.close()
      debug_print("read ok")
      for line in lines :
        # iterate all file lines and act on what they are: comment, include, ifdef, sth else?
        # one line can be realistically only one "thing" so order of processing does not matter
        # vvv see if there is include on this line
        include_found = include_finder.findall(line)
        for include in include_found :
          debug_print("include::", include[1])
          include_real_dir = abspath(join(self.parent_path, this_path))
          debug_print("real dir", include_real_dir)
          new_file = AFile(include[1], include_real_dir)
          new_file.commented = new_file.commented or (include[0] == "//") or (stack and stack[-1].startswith("//")) or self.commented
          if (include_real_dir == self.parent_path) and (basename(include[1]) == self.fname) :
            debug_print("marking as self-recursive due to apparent identity with parent file")
            new_file.recursive = True
          if any((c in invalid_chars) for c in include[1]) :
            debug_print("marking as invalid due to weird characters in path")
            new_file.invalid = True
          # all this ^^^ is about determining status of the found include
          new_file.conditions = [i for i in stack]
          self.includes.append(new_file)
        # this vvv is about determining if a multiline comment starts or ends here (instead)
        comment_found = comment_finder.findall(line)
        for comment in comment_found :
          if stack and stack[-1] == comment :
            debug_print("comment", comment, "pop")
            stack.pop()
          else :
            debug_print("comment", comment, "push")
            stack.append(comment)
        # vvv see if there is a preprocessor condition
        ifdef_found = ifdef_finder.findall(line)
        for ifdef in ifdef_found :
          if ifdef[0] != "//" : # is the condition not-commented out?
            if ifdef[1].startswith("endif") :
              stack.pop() # assumes there are no condition crossovers
            else :
              stack.append(ifdef[1])
          else:
            # silently drop commented-out conditions
            debug_print("dropped commented out " + ifdef[1])
    except Exception as e :
      # expected to catch file exceptions
      debug_print("Exception caught for resolve()")
      debug_print("self.fname ", self.fname)
      debug_print("self.parent_path", self.parent_path)
      debug_print("curdir ", getcwd())
      debug_print("error ", e)
    for subfile in self.includes :
      subfile.resolve()
  
  def print_tree(self, level=0) :
    # first store any mods to the file listing
    warns = ""
    if self.commented :
      warns += "//"
    if self.recursive :
      warns += "R!"
    if self.invalid :
      warns += "X!"
    if warns :
      warns += " " # terminating space to make it readable
    if not (not display_commented and self.commented) :
      # show in all cases except when comments are off and it's comment
      print(" "*indent_level*level + warns + self.fname)
    cond = ""
    for s in self.conditions :
      if not s.startswith("//") :
        cond += " " + s
    if cond :
      print(" "*indent_level*(level+1) + "\\- !!! "+ cond)
    # invalid, recursive etc. must not have any includes stored so safe to call it with no check
    for subfile in self.includes :
      subfile.print_tree(level+1)


def guess_file() :
  # see if there is master.adoc, index.adoc, or a single .adoc file, in that order, and return that file or empty string
  debug_print("guess_file()")
  if isfile("master.adoc") :
    return "master.adoc"
  elif isfile("index.adoc") :
    return "index.adoc"
  else :
    adocs = glob("*.adoc")
    if len(adocs) == 1 :
      return adocs[0]
  return ""


def analyze_path(knownfile) :
  # takes a path that is a known existing file under current situation
  top = AFile(knownfile)
  top.resolve()
  top.print_tree()


def process_path(somepath) :
  debug_print("process_path()")
  the_file = basename(somepath)
  the_dir = dirname(somepath)
  debug_print(somepath, "//", the_dir, "//", the_file)
  # now handle when a directory is given instead of a file (must always guess then)
  if the_dir and not the_file :
    # if parameter is given like some/dir/ with trailing slash (eg. shell autocomplete)
    chdir(the_dir)
    the_file = guess_file()
    if not the_file :
      print("Could not guess an AsciiDoc file in directory %s" % (the_dir))
    else :
      analyze_path(the_file)
  elif isdir(the_file) :
    # if parameter is given as some/dir without trailing slash (eg. manually)
    target = join(the_dir,the_file)
    chdir(target)
    the_file = guess_file()
    if not the_file :
      print("Could not guess an AsciiDoc file in directory %s" % (target))
      exit(1)
    analyze_path(the_file)
  elif the_dir :
    # if parameter is given as some/dir/file.adoc and has a dir component
    chdir(the_dir)
    analyze_path(the_file)
  else :
    # if it's given as file.adoc with no directory
    analyze_path(the_file)



# MAIN
curdir = getcwd()
debug_print(sys.argv)
if len(sys.argv) < 2 :
  # called with no params, must guess the file
  the_file = guess_file()
  if not the_file :
    # could not guess, let's fail
    print("No parameters specified and no file found that you obviously wanted to be automagically guessed.")
    exit(1)
  else :
    # found a default file
    process_path(the_file)
else :
  # called with exact params specifying globs for files or dirs 
  items = sys.argv[1:]
  debug_print(items)
  finds = []
  for item in items :
    found = glob(item)
    finds += found
  debug_print(finds)
  nitems = len(finds)
  for i in range(nitems) :
    item = finds[i]
    print("Listing %s:" % (item))
    chdir(curdir)
    process_path(item)
    if i < nitems-1 :
      print() # empty line

# EOF
